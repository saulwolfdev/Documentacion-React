"use strict";(self.webpackChunkstorybook_docu=self.webpackChunkstorybook_docu||[]).push([[207],{"./src/Conceptos de Javascript/08-funciones.mdx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__);__webpack_require__("./node_modules/react/index.js");var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js"),C_dev_Documentacion_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components-mdx/index.js");__webpack_require__("./src/styles.css");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",strong:"strong",h4:"h4",h3:"h3",ul:"ul",li:"li",code:"code"},(0,C_dev_Documentacion_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__.ah)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"funciones",children:"Funciones"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["En JavaScript hay dos formas principales de crear funciones mediante la declaración de función ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"function declaration"})," y mediante la expresión de función ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"function expression"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"declaración-de-función-function-declaration",children:"Declaración de Función (Function Declaration)"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"La declaración de función sigue la siguiente sintaxis:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  function nombreFuncion(parametro1, parametro2, ...) {\n  // Código de la función\n    return resultado; // Opcional\n  }\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"ejemplo:"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  function sumar(a, b) {\n    return a + b;\n  }\n\n  // Uso de la función\n  var resultadoSuma = sumar(3, 5);\n  console.log(resultadoSuma); // Resultado: 8\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["En este ejemplo se declara una función llamada sumar que toma dos parámetros ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"a y b"})," y devuelve la suma de esos dos valores."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"expresión-de-función-function-expression",children:"Expresión de Función (Function Expression)"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"La expresión de función asigna una función a una variable y sigue la siguiente sintaxis:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  var nombreFuncion = function(parametro1, parametro2, ...) {\n  // Código de la función\n    return resultado; // Opcional\n  };\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Ejemplo:"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  var multiplicar = function(x, y) {\n    return x * y;\n  };\n\n  // Uso de la función\n  var resultadoMultiplicacion = multiplicar(4, 6);\n  console.log(resultadoMultiplicacion); // Resultado: 24\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["En este ejemplo, se utiliza una expresión de función para asignar una función anónima a la variable ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"multiplicar"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Ambas formas la declaración de función y la expresión de función son válidas y tienen sus usos específicos en diferentes situaciones.\r\nLa principal diferencia radica en cómo son tratadas por el intérprete de JavaScript durante la fase de carga del código."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"la-diferencia-entre-function-expression-y-declaration",children:"La Diferencia entre Function expression y Declaration"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"La principal diferencia entre una Function Declaration y una Function Expression en JavaScript radica en cómo son declaradas y en su accesibilidad en el código."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Function Declaration:"}),'\r\nLa Function Declaration se declara usando la palabra clave function seguida por el nombre de la función y la lista de parámetros.\r\nUna característica importante de las Function Declarations es que son "elevadas" (hoisted) durante la fase de compilación del código. Esto significa que la función puede ser\r\nllamada incluso antes de que se declare en el código.']}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:'\n  saludar("Juan"); // Esto funciona incluso antes de la declaración\n\n  function saludar(nombre) {\n    console.log("Hola, " + nombre + "!");\n  }\n  ',language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Function Expression:"}),"\r\nLa Function Expression se crea asignando una función anónima a una variable. La diferencia clave aquí es que las Function Expressions no son elevadas de la misma manera que las\r\nFunction Declarations deben ser declaradas antes de ser utilizadas."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:'  \n  saludar("Juan");// Esto dará un error: Uncaught TypeError: saludar is not a function\n\n  var saludar = function(nombre) {\n    console.log("Hola, " + nombre + "!");\n  };\n  ',language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"En resumen, la principal diferencia es que las Function Declarations son elevadas y pueden ser llamadas incluso antes de ser declaradas en el código, mientras que las Function\r\nExpressions no son elevadas y deben ser declaradas antes de ser utilizadas."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Ambas formas tienen sus casos de uso, y la elección entre una u otra a menudo depende del contexto y de cómo se planea estructurar el código."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"la-diferencia-entre-función-y-método",children:"La Diferencia entre Función y Método"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Función en JavaScript:"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Una función en JavaScript es un bloque de código reutilizable que realiza una tarea específica. Puede ser declarada mediante la palabra clave function y luego llamada cuando\r\nsea necesario."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  function sumar(a, b) {\n    return a + b;\n  }\n\n  var resultado = sumar(3, 5);\n  console.log(resultado); // Resultado: 8\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"En este ejemplo sumar es una función que toma dos parámetros y devuelve su suma."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Método en JavaScript:"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Un método es una función que está asociada a un objeto en particular. En JavaScript, los objetos pueden tener propiedades y métodos. Los métodos son funciones que son parte de un\r\nobjeto y actúan sobre ese objeto."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:'\n  var persona = {\n    nombre: "Juan",\n    edad: 30,\n    saludar: function( ) {\n      console.log("Hola, soy " + this.nombre + " y tengo " + this.edad + " años.");\n    }\n  };\n\n  persona.saludar( ); // Salida: Hola, soy Juan y tengo 30 años.\n  ',language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"parametros-y-argumentos-en-funciones",children:"Parametros y Argumentos en Funciones"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"En JavaScript es importante comprender la diferencia entre parámetros y argumentos en funciones."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Parámetros en Funciones:"}),"\r\nLos parámetros son variables que se definen en la firma de la función y que actúan como marcadores de posición para los valores que la función espera recibir cuando es llamada.\r\nLos parámetros se encuentran entre los paréntesis en la declaración de la función."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:'\n  function saludar(nombre) {\n    console.log("Hola, " + nombre + "!");\n  }\n  ',language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["En este ejemplo, ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"nombre"})," es un parámetro de la función ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"saludar"}),". Cuando llamamos a la función ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:'saludar("Juan")'}),', el valor "Juan" se pasa como argumento al\r\nparámetro ',(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"nombre"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Argumentos en Funciones:"}),"\r\nLos argumentos son los valores reales que se pasan a la función cuando esta es invocada. Estos valores son asignados a los parámetros correspondientes en la definición\r\nde la función."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  function sumar(a, b) {\n    console.log(a + b);\n  }\n\n  sumar(3, 5); // Aquí, 3 y 5 son argumentos pasados a los parámetros a y b\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["En este caso ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"sumar"})," es una función que toma dos parámetros, ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"a"})," y ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"b"}),". Cuando llamamos a ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"sumar(3, 5)"})," los valores 3 y 5 son los argumentos que se asignan a\r\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"a"})," y ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"b"})," respectivamente."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Ejemplo completo:"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:'\n  function calcularPrecio(producto, precioBase, descuento) {\n    var precioFinal = precioBase - descuento;\n    console.log("El precio final de " + producto + " es: $" + precioFinal);\n  }\n\n  calcularPrecio("Camiseta", 25, 5); // "El precio final de Camiseta es: $20"\n  ',language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["En este ejemplo, ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"producto"}),", ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"precioBase"}),", y ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"descuento"})," son parámetros de la función ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"calcularPrecio"}),". Cuando llamamos a la función con ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:'calcularPrecio("Camiseta", 25, 5)'}),'\r\n"Camiseta", 25, y 5 son argumentos que se asignan a los parámetros correspondientes.']}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"En resumen, los parámetros son las variables que esperan recibir valores, y los argumentos son los valores reales que se pasan a la función cuando esta es llamada."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"añadir-funciones-en-un-objeto",children:"Añadir Funciones en un Objeto"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:'Añadir funciones a un objeto en JavaScript implica asignar una función como una propiedad del objeto. Las funciones asociadas a objetos se conocen como "métodos".'}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:'\n  var persona = {\n    nombre: "Juan",\n    edad: 30,\n    saludar: function() {\n      console.log("Hola, soy " + this.nombre + " y tengo " + this.edad + " años.");\n    },\n    cumpleaños: function() {\n      this.edad++;\n      console.log("¡Feliz cumpleaños! Ahora tengo " + this.edad + " años.");\n    }\n  };\n\n  // Uso de los métodos del objeto\n  persona.saludar();     // Salida: Hola, soy Juan y tengo 30 años.\n  persona.cumpleaños();  // Salida: ¡Feliz cumpleaños! Ahora tengo 31 años.\n  ',language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["En este ejemplo, ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"saludar"})," y ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"cumpleaños"})," son funciones que se han añadido al objeto ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"persona"}),". ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"saludar"})," es un método que muestra un saludo con el nombre y la edad de la persona,\r\nmientras que ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"cumpleaños"})," es un método que incrementa la edad de la persona y muestra un mensaje de cumpleaños."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Tambien se puede añadir funciones al objeto después de su definición."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:'\n  persona.despedirse = function() {\n    console.log("Adiós, hasta luego.");\n  };\n\n  // Llamar a la nueva función\n  persona.despedirse();  // Salida: Adiós, hasta luego.\n  ',language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["En este caso se añadió la función ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"despedirse"})," al objeto ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"persona"})," después de su definición."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Este enfoque de añadir funciones a objetos es fundamental en la programación orientada a objetos en JavaScript, y es una de las maneras de encapsular lógica y comportamientos\r\ndentro de objetos."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"arrow-functions",children:"Arrow Functions"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:'Las "arrow functions" (también conocidas como funciones flecha) son una característica de JavaScript que proporciona una forma más concisa y clara de escribir funciones.'}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Sintaxis"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"La sintaxis básica de una arrow function es la siguiente:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"(parametro1, parametro2, ..., parametroN) => expresion",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Si la función tiene más de un parámetro, se debe poner entre paréntesis. Si no tiene parámetros, los paréntesis se mantienen pero están vacíos.\r\nLa expresión después de la flecha (=>) es lo que la función devuelve automáticamente."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Por ejemplo, aquí hay una función tradicional y su equivalente en arrow function:"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  // Función tradicional\n    function sumar(a, b) {\n        return a + b;\n    }\n\n  // Arrow function equivalente\n    let sumarArrow = (a, b) => a + b;\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"retorno-automático",children:"Retorno automático"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Cuando una arrow function tiene solo una expresión en su cuerpo (como en el ejemplo anterior), esa expresión se toma como el valor de retorno. No es necesario usar la palabra\r\nclave return."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"contexto-léxico-this",children:"Contexto léxico (this)"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Una diferencia importante entre las funciones tradicionales y las arrow functions es cómo manejan el valor de this."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"En una arrow function, this se hereda del contexto en el que se definió la función. Esto significa que no tiene su propio this. Por otro lado, en una función tradicional,\r\nthis puede cambiar dependiendo de cómo se llame la función."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  let objet = {\n    nombre: \"John\",\n    saludar: function( ) {\n        setTimeout(function( ) {\n            console.log(\"Hola, soy \" + this.nombre); // En este contexto, 'this' se refiere a 'objet'\n        }, 1000);\n    }\n   };\n\n  objet.saludar(); // Imprimirá \"Hola, soy undefined\" porque 'this' no se refiere a 'objet'\n\n  // Solución con arrow function\n  let objetArrow = {\n    nombre: \"John\",\n    saludar: function( ) {\n        setTimeout(( ) => {\n            console.log(\"Hola, soy \" + this.nombre); // 'this' se refiere a 'objetArrow'\n        }, 1000);\n    }\n  };\n\n  objetArrow.saludar( ); // Imprimirá \"Hola, soy John\" correctamente\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"no-pueden-ser-usadas-como-constructores",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"No pueden ser usadas como constructores"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Las arrow functions no pueden ser utilizadas como constructores para crear objetos. Intentar hacerlo causará un error."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:'\n  let Persona = (nombre) => {\n    this.nombre = nombre; // Esto arrojará un error\n  };\n\n  let john = new Persona("John"); // Error: Persona is not a constructor\n  ',language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Sin arguments"}),"\r\nLas arrow functions no tienen su propio objeto arguments. Si necesitas acceder a los argumentos de la función, deberías usar una función tradicional."]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"No pueden ser generadoras"}),"\r\nLas arrow functions no pueden ser utilizadas como funciones generadoras (aquellas que pueden pausar su ejecución y luego reanudarla)."]}),"\n"]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"resumen",children:"Resumen"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Las arrow functions son una característica poderosa de JavaScript que proporciona una forma más concisa de escribir funciones.\r\nSin embargo, es importante entender las diferencias clave entre arrow functions y funciones tradicionales, especialmente en lo que respecta al manejo de this."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"ventajas-de-los-arrow-functions",children:"Ventajas de los Arrow Functions"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Las funciones flecha, o Arrow Functions, en JavaScript tienen varias ventajas que las hacen atractivas en ciertos contextos."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Sintaxis Concisa:"})," Las Arrow Functions tienen una sintaxis más corta y concisa en comparación con las funciones tradicionales, lo que hace que el código sea más legible\r\ny fácil de escribir."]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  // Función tradicional\n  const sumaTradicional = function(a, b) {\n    return a + b;\n  };\n\n  // Arrow Function equivalente\n  const sumaArrow = (a, b) => a + b;\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"No tienen su propio this:"})," Las Arrow Functions no tienen su propio objeto this. En cambio toman prestado el this del contexto en el que fueron creadas.\r\nEsto puede ser beneficioso en situaciones donde las funciones tradicionales podrían tener problemas con el manejo de this."]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  function Persona( ) {\n    this.edad = 0;\n\n    // Función tradicional\n    setInterval(function( ) {\n      this.edad++;\n      console.log(this.edad); // Esto generará un error\n    }, 1000);\n\n    // Arrow Function\n    setInterval(( ) => {\n      this.edad++;\n      console.log(this.edad); // Esto funcionará correctamente\n    }, 1000);\n  }\n\n  const persona = new Persona( );\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"No tienen arguments:"})," Las Arrow Functions no tienen su propio objeto ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"arguments"}),". Si necesitas acceder a los argumentos de la función es preferible utilizar el operador de\r\npropagación ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"..."})," en lugar de arguments."]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  // Función tradicional\n  function suma() {\n    let total = 0;\n    for (let i = 0; i < arguments.length; i++) {\n      total += arguments[i];\n    }\n    return total;\n  }\n\n  // Arrow Function equivalente\n  const sumaArrow = (...valores) => valores.reduce((acc, val) => acc + val, 0);\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Estas ventajas hacen que las Arrow Functions sean especialmente útiles en situaciones donde la concisión y la manipulación de this son consideraciones importantes.\r\nSin embargo, es esencial entender las diferencias de comportamiento entre las Arrow Functions y las funciones tradicionales para utilizarlas de manera efectiva en diferentes\r\ncontextos."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h3,{id:"arrow-functions-en-un-foreach-y-un-map",children:"Arrow Functions en un forEach y un map"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Usar Arrow Functions con métodos como forEach y map es común y puede hacer que el código sea más conciso y legible."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Arrow Function con forEach:"})," La función forEach se utiliza para iterar sobre elementos de un array y ejecutar una función proporcionada una vez por cada elemento."]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  const numeros = [1, 2, 3, 4];\n\n  numeros.forEach((numero, indice) => {\n    console.log(`Elemento en el índice ${indice}: ${numero}`);\n  });\n  // Salida esperada:\n  // Elemento en el índice 0: 1\n  // Elemento en el índice 1: 2\n  // Elemento en el índice 2: 3\n  // Elemento en el índice 3: 4\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.ul,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.li,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"Arrow Function con map:"})," El método map crea un nuevo array con los resultados de llamar a una función proporcionada para cada elemento en el array."]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  const numeros = [1, 2, 3, 4];\n\n  const cuadrados = numeros.map(numero => numero * numero);\n  console.log(cuadrados); // Salida esperada: [1, 4, 9, 16]\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["En ambos ejemplos se utilizan Arrow Functions para proporcionar la lógica que se ejecuta en cada iteración. Estas Arrow Functions son útiles cuando la lógica es corta y se puede\r\nexpresar de manera concisa en una línea. Recuerda que las Arrow Functions tienen un valor de retorno implícito cuando son de una sola línea, por lo que no es necesario usar\r\nla palabra clave ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.strong,{children:"return"})," en estos casos."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Estos son solo ejemplos básicos, pero ilustran cómo las Arrow Functions pueden hacer que el código sea más claro y conciso, especialmente cuando se utilizan con métodos que implican\r\niteración sobre arrays."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"tips",children:"Tips"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"evitar-el-uso-de-variables-globales",children:"Evitar el uso de variables globales"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Declarar variables en el ámbito global sin necesidad.\r\nLimita el ámbito de tus variables usando let o const dentro de funciones o bloques específicos."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  // Incorrecto\n  let globalVariable = 5;\n\n  function miFuncion() {\n    // Accediendo a la variable global innecesariamente\n    console.log(globalVariable);\n  }\n\n  // Correcto\n  function miFuncion() {\n    const localVariable = 5;\n    console.log(localVariable);\n  }\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"manejo-de-funciones-anónimas",children:"Manejo de funciones anónimas"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Crear funciones anónimas innecesarias.\r\nUsar en su lugar funciones con nombre para facilitar el seguimiento del código y mejorar la legibilidad."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  // Incorrecto\n  setTimeout(function() {\n    console.log('Hola, mundo!');\n  }, 1000);\n\n  // Correcto\n  function saludar() {\n    console.log('Hola, mundo!');\n  }\n\n  setTimeout(saludar, 1000);\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"manejo-de-funciones-de-retorno",children:"Manejo de funciones de retorno"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Un error comun es no devolver valores explícitamente desde funciones.\r\nSi una función debe devolver un valor asegúrate de incluir una declaración de retorno."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  // Incorrecto\n  function suma(a, b) {\n    const resultado = a + b;\n  }\n\n  // Correcto\n  function suma(a, b) {\n    const resultado = a + b;\n    return resultado;\n  }\n  ",language:"javascript"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h4,{id:"callbacks-y-funciones-asíncronas",children:"Callbacks y funciones asíncronas"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.p,{children:"Un error puede ser no manejar errores en funciones asíncronas.\r\nUsa bloques try-catch para manejar errores en funciones asíncronas y callbacks."}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components_mdx_index_js__WEBPACK_IMPORTED_MODULE_2__.dn,{codeString:"\n  // Incorrecto\n  async function fetchData() {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  }\n\n  // Correcto\n  async function fetchData() {\n    try {\n      const response = await fetch('https://api.example.com/data');\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.error('Error al obtener datos:', error);\n    }\n  }\n  ",language:"javascript"})]})}__webpack_exports__.default=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,C_dev_Documentacion_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_4__.ah)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,Object.assign({},props,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,props)})):_createMdxContent(props)}},"./src/components-mdx/index.js":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{zx:function(){return components_mdx_Button},dn:function(){return components_mdx_CodeBlock},w2:function(){return components_mdx_CodeSandboxLink}});var slicedToArray=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),react=__webpack_require__("./node_modules/react/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),ToggleComponent=function ToggleComponent(_ref){var title=_ref.title,_ref$level=_ref.level,level=void 0===_ref$level?"h1":_ref$level,children=_ref.children,_useState=(0,react.useState)(!1),_useState2=(0,slicedToArray.Z)(_useState,2),isOpen=_useState2[0],setIsOpen=_useState2[1],Heading=level;return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(Heading,{onClick:function toggle(){setIsOpen(!isOpen)},style:{cursor:"pointer"},children:title}),isOpen&&(0,jsx_runtime.jsx)("div",{children:children})]})};ToggleComponent.__docgenInfo={description:"",methods:[],displayName:"ToggleComponent",props:{level:{defaultValue:{value:'"h1"',computed:!1},required:!1}}};var prism=__webpack_require__("./node_modules/react-syntax-highlighter/dist/esm/prism.js"),material_dark=__webpack_require__("./node_modules/react-syntax-highlighter/dist/esm/styles/prism/material-dark.js"),lib=__webpack_require__("./node_modules/react-copy-to-clipboard/lib/index.js"),CodeBlock=function CodeBlock(_ref){var codeString=_ref.codeString,language=_ref.language,sandboxUrl=_ref.sandboxUrl,showButtons=_ref.showButtons,_useState=(0,react.useState)(!1),_useState2=(0,slicedToArray.Z)(_useState,2),copied=_useState2[0],setCopied=_useState2[1],copyButtonLabel=copied?"Copied":"Copy",primary=!!copied,copyButton=(0,jsx_runtime.jsx)(components_mdx_Button,{primary:primary,label:copyButtonLabel,size:"small"});return(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(prism.Z,{language:language||"javascript",style:material_dark.Z,children:codeString}),(0,jsx_runtime.jsxs)("div",{style:{display:"flex",justifyContent:"flex-end"},children:[showButtons&&(0,jsx_runtime.jsx)(components_mdx_CodeSandboxLink,{url:sandboxUrl}),(0,jsx_runtime.jsx)(lib.CopyToClipboard,{text:codeString,onCopy:function handleCopy(){setCopied(!0),setTimeout((function(){return setCopied(!1)}),2e3)},children:copyButton})]})]})};CodeBlock.__docgenInfo={description:"",methods:[],displayName:"CodeBlock"};var components_mdx_CodeBlock=CodeBlock,objectSpread2=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectSpread2.js"),objectWithoutProperties=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),_excluded=["primary","backgroundColor","size","label"],Button=function Button(_ref){var primary=_ref.primary,backgroundColor=_ref.backgroundColor,size=_ref.size,label=_ref.label,props=(0,objectWithoutProperties.Z)(_ref,_excluded),mode=primary?"storybook-button--primary":"storybook-button--secondary";return(0,jsx_runtime.jsx)("button",(0,objectSpread2.Z)((0,objectSpread2.Z)({type:"button",className:["storybook-button","storybook-button--".concat(size),mode].join(" "),style:backgroundColor&&{backgroundColor:backgroundColor}},props),{},{children:label}))};Button.defaultProps={backgroundColor:null,primary:!1,size:"medium",onClick:void 0},Button.__docgenInfo={description:"",methods:[],displayName:"Button",props:{backgroundColor:{defaultValue:{value:"null",computed:!1},description:"",type:{name:"string"},required:!1},primary:{defaultValue:{value:"false",computed:!1},description:"",type:{name:"bool"},required:!1},size:{defaultValue:{value:"'medium'",computed:!1},description:"",type:{name:"enum",value:[{value:"'small'",computed:!1},{value:"'medium'",computed:!1},{value:"'large'",computed:!1}]},required:!1},onClick:{defaultValue:{value:"undefined",computed:!0},description:"",type:{name:"func"},required:!1},label:{description:"",type:{name:"string"},required:!0}}};var components_mdx_Button=Button,CodeSandboxLink=function CodeSandboxLink(_ref){var url=_ref.url,codeSandboxButton=(0,jsx_runtime.jsx)(components_mdx_Button,{primary:!1,label:"Ver en CodeSandbox",size:"small"});return(0,jsx_runtime.jsx)("span",{onClick:function redirectToCodeSandbox(){window.open(url,"_blank")},style:{cursor:"pointer",marginRight:"8px"},children:codeSandboxButton})};CodeSandboxLink.__docgenInfo={description:"",methods:[],displayName:"CodeSandboxLink"};var components_mdx_CodeSandboxLink=CodeSandboxLink},"./src/styles.css":function(){}}]);